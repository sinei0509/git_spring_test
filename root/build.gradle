/**
 *
 * Build時
 * gradlew.bat clean build
 *
 */
buildscript {
  ext {
    //Spring Boot
    springBootVersion = '1.4.0.RELEASE'
  }

  repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/plugins-release' }
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'http://repo.spring.io/milestone' }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
  }
}

subprojects {

  apply plugin: 'java'
  apply plugin: 'spring-boot'
  apply plugin: 'propdeps'
  apply plugin: 'propdeps-maven'
  apply plugin: 'propdeps-eclipse'

  repositories {
    mavenCentral()
  }


  def defaultEncoding = 'UTF-8'
  [compileJava, compileTestJava]*.options*.encoding = defaultEncoding

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  //プロジェクトのバージョン
  version = '0.1'

  //ソースディレクトリ設定
  sourceSets {
      main {
          resources {
              srcDirs = [ 'src/main/resources' ]
          }
      }
  }

  dependencies {
    provided("org.projectlombok:lombok:1.16.10")
    compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    optional "org.springframework.boot:spring-boot-configuration-processor"
    testCompile 'junit:junit:4.11'
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
  }

  compileJava.dependsOn(processResources)

  task mkdirs << {
    ["src/main/java", "src/main/resources", "src/test/java", "src/test/resources"].each {
      def path = "${projectDir}/${it}"
      ant.mkdir(dir: path)
    }
  }

}

project(':common') {
  dependencies {
  }

}
project(':web') {

  dependencies {
    compile project(':common')
    //compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
  }
}
project(':service') {
  dependencies {
    compile project(':common')
    //compile group: 'org.elasticsearch', name: 'elasticsearch', version: '2.4.0'
    //compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
  }
}
project(':batch') {

  dependencies {
    compile project(':common')
    //compile("org.springframework.boot:spring-boot-starter-batch:${springBootVersion}")
  }
}

task wrapper(type: Wrapper) {
 gradleVersion = '3.1'
}
